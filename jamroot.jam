# Binspector Jamroot

path-constant TOP : . ;

import os ;
import testing ;
import feature ;

#
# Permits overriding the Boost directory by specifying BOOST_PATH in the OS
# environment table.
#

local boost-path = [ os.environ BOOST_PATH ] ;

if $(boost-path)
{
    boost-path = $(boost-path) ;
}
else
{
    boost-path = ../boost_libraries ;
}

path-constant boost-path : $(boost-path) ;

use-project /boost : $(boost-path)  ;

echo boost-path: $(boost-path) ;

#
# Permits overriding the double-conversion directory by specifying DBL_CONV_PATH
# in the OS environment table.
#

local double-conversion-path = [ os.environ DBL_CONV_PATH ] ;

if $(double-conversion-path)
{
    double-conversion-path = $(double-conversion-path) ;
}
else
{
    double-conversion-path = ../ ;
}

path-constant double-conversion-path : $(double-conversion-path) ;

echo double-conversion-path: $(double-conversion-path) ;

#
# Permits overriding the stlab directory by specifying STLAB_PATH
# in the OS environment table.
#

local stlab-path = [ os.environ STLAB_PATH ] ;

if $(stlab-path)
{
    stlab-path = $(stlab-path) ;
}
else
{
    stlab-path = ../stlab ;
}

path-constant stlab-path : $(stlab-path) ;

echo stlab-path: $(stlab-path) ;

#
# Permits overriding the asl directory by specifying ASL_PATH
# in the OS environment table.
#

local asl-path = [ os.environ ASL_PATH ] ;

if $(asl-path)
{
    asl-path = $(asl-path) ;
}
else
{
    asl-path = ../adobe_source_libraries ;
}

path-constant asl-path : $(asl-path) ;

echo asl-path: $(asl-path) ;

#
# Permits overriding the apl directory by specifying APL_PATH
# in the OS environment table.
#

local apl-path = [ os.environ APL_PATH ] ;

if $(apl-path)
{
    apl-path = $(apl-path) ;
}
else
{
    apl-path = ../adobe_platform_libraries ;
}

path-constant apl-path : $(apl-path) ;

echo apl-path: $(apl-path) ;

# Set up c++14 support as a feature so it will propagate into the
# boost dependencies

feature.feature cpp14 :
    on :
    composite optional propagated
    ;

feature.compose <cpp14>on :
        <cxxflags>"-std=c++14 -fconstexpr-depth=1024 -ftemplate-depth=1024"
        <define>BOOST_NO_CXX11_NUMERIC_LIMITS=1
        <linkflags>"-lc++"
    ;

project binspector
    : requirements
        <define>BOOST_ALL_NO_LIB=1
        <define>ADOBE_SERIALIZATION=1
        <define>ADOBE_STD_SERIALIZATION=1

        # Clang toolset specializations
        <toolset>clang:<cpp14>on

        # MSVC specializations
        <toolset>msvc:<cxxflags>"-DUNICODE -D_UNICODE"
        <toolset>msvc:<define>_CRT_SECURE_NO_DEPRECATE
        <toolset>msvc:<define>_SCL_SECURE_NO_DEPRECATE
        <toolset>msvc:<define>_WIN32_WINNT=0x400
        <toolset>msvc:<define>ADOBE_TEST_MICROSOFT_NO_DEPRECATE=0

        # MSVC threading specializations
        <toolset>msvc,<threading>multi:<define>USE_WINTHREAD

        # MSVC 8 specializations
        <toolset>msvc-8.0:<cxxflags>"/W3 /WX /Wp64 /Zc:wchar_t /Zc:forScope"

        # MSVC 9 specializations
        <toolset>msvc-9.0:<cxxflags>"/W3 /WX /Zc:wchar_t /Zc:forScope"
    : default-build
        <link>static
        <threading>multi
        <preserve-test-targets>on
    : build-dir
        $(TOP)/../built_artifacts
    ;

echo building... ;

build-project app ;
